import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import json

bot = Bot(token="6141417763:AAE8EH-x1TLaGh_MCrK4aIXzrvvSV3PQFGc")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


def save_language_choice(user_id, language):
    data = {}

    try:
        with open('language_data.json', 'r') as file:
            data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        pass

    if str(user_id) in data:
        data[str(user_id)] = language
    else:
        data[str(user_id)] = language

    with open('language_data.json', 'w') as file:
        json.dump(data, file)


def check_user_exists(user_id):
    try:
        with open('language_data.json', 'r') as file:
            data = json.load(file)
            return str(user_id) in data
    except (FileNotFoundError, json.JSONDecodeError):
        return False


def get_user_language(user_id):
    try:
        with open('language_data.json', 'r') as file:
            data = json.load(file)
            return data.get(str(user_id))
    except (FileNotFoundError, json.JSONDecodeError):
        return None


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    name = message.from_user.full_name
    user_id = message.from_user.id
    await bot.send_chat_action(user_id, 'typing')
    await asyncio.sleep(0.5)

    lang_keyboard = types.InlineKeyboardMarkup()
    lang_keyboard.add(types.InlineKeyboardButton(text="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞üá∫üá¶", callback_data="lang_ua"),
                      types.InlineKeyboardButton(text="Englishüá¨üáß", callback_data="lang_en"))

    if check_user_exists(user_id):
        await start_taryf(message)
    else:
        await message.reply(f"""–ü—Ä–∏–≤—ñ—Ç *{name}*, –±—É–¥—å–ª–∞—Å–∫–∞ –æ–±–µ—Ä–∏ –º–æ–≤—É!  
Hi *{name}*, please choose your language!""",
                            reply_markup=lang_keyboard, parse_mode="Markdown")


@dp.message_handler(commands=['language'])
async def change_lang(message: types.Message):
    user_id = message.from_user.id
    await bot.send_chat_action(user_id, 'typing')
    await asyncio.sleep(0.5)
    lang_keyboard = types.InlineKeyboardMarkup()
    lang_keyboard.add(types.InlineKeyboardButton(text="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞üá∫üá¶", callback_data="lang_ua"),
                      types.InlineKeyboardButton(text="Englishüá¨üáß", callback_data="lang_en"))

    await message.reply(f"""–ë—É–¥—å–ª–∞—Å–∫–∞ –æ–±–µ—Ä–∏ –º–æ–≤—É!  
Please choose your language!""",
                        reply_markup=lang_keyboard, parse_mode="Markdown")


async def start_taryf(message: types.Message):
    user_id = message.from_user.id
    name = message.from_user.full_name
    user_language = get_user_language(user_id)

    if user_language == "ua":
        start_keyboard_ua = types.InlineKeyboardMarkup()
        start_keyboard_ua.add(types.InlineKeyboardButton(text="üîé–ü–æ—á–∞—Ç–∏ –ø—ñ–¥–±—ñ—Ä", callback_data="age_survey"))
        await bot.send_message(user_id, f"–ü—Ä–∏–≤—ñ—Ç *{name}*! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π –¥–ª—è —Ç–µ–±–µ —Ç–∞—Ä–∏—Ñ Lifecell!",
                               reply_markup=start_keyboard_ua, parse_mode="Markdown")

    elif user_language == "en":
        start_keyboard_en = types.InlineKeyboardMarkup()
        start_keyboard_en.add(types.InlineKeyboardButton(text="üîéStart selection", callback_data="age_survey"))
        await bot.send_message(user_id, f"Hello *{name}*! I will help you find the best Lifecell tariff for you!",
                               reply_markup=start_keyboard_en, parse_mode="Markdown")


@dp.callback_query_handler(lambda call: call.data == 'age_survey')
async def age_select(call: types.CallbackQuery):
    name = call.from_user.full_name
    user_id = call.from_user.id
    user_language = get_user_language(user_id)

    if user_language == "ua":
        understood_keyboard_ua = types.InlineKeyboardMarkup()
        understood_keyboard_ua.add(types.InlineKeyboardButton(text="‚úÖ–ó—Ä–æ–∑—É–º—ñ–ª–æ", callback_data="understood"))

        await call.message.edit_text(
            text=f"*{name}*, —â–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ç–∞—Ä–∏—Ñ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –ø—Ä–æ—Å—Ç–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å.",
            reply_markup=understood_keyboard_ua, parse_mode="Markdown")

    elif user_language == "en":
        understood_keyboard_en = types.InlineKeyboardMarkup()
        understood_keyboard_en.add(types.InlineKeyboardButton(text="‚úÖUnderstood", callback_data="understood"))
        await call.message.edit_text(
            text=f"*{name}*, to choose the best tariff, you need to answer a few simple questions.",
            reply_markup=understood_keyboard_en, parse_mode="Markdown")


@dp.callback_query_handler(lambda call: call.data == 'understood')
async def undersood_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_language = get_user_language(user_id)
    zero_twelve = types.InlineKeyboardButton(text="age", callback_data="one")
    age_keyboard = types.InlineKeyboardMarkup()
    age_keyboard.row(zero_twelve)

    if user_language == "ua":
        await call.message.edit_text(text="""–ü–µ—Ä—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:
–ë—É–¥—å–ª–∞—Å–∫–∞ –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à –≤—ñ–∫.""", reply_markup=age_keyboard, parse_mode="Markdown")


@dp.callback_query_handler()
async def language_callback(call: types.CallbackQuery):
    user_id = call.from_user.id
    language = call.data.split('_')[1]
    await bot.send_chat_action(user_id, 'typing')
    await asyncio.sleep(0.5)

    if language == "ua":
        await bot.send_message(call.message.chat.id, """–í–∏ –æ–±—Ä–∞–ª–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—Éüá∫üá¶!
–í–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É –Ω–∞–ø–∏—Å–∞–≤—à–∏ /language
–¢–µ–ø–µ—Ä —â–µ —Ä–∞–∑ –Ω–∞–ø–∏—à—ñ—Ç—å /start!
""")
        save_language_choice(user_id, language)
        await start_taryf(call.message)


    elif language == "en":
        await bot.send_message(call.message.chat.id, """You selected english languageüá¨üáß!
You can always change the language by writing /language
Now type /start again!
""")
        save_language_choice(user_id, language)


if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
