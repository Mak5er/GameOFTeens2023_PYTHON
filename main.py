import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from jsons import *

bot = Bot(token="6141417763:AAE8EH-x1TLaGh_MCrK4aIXzrvvSV3PQFGc")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    name = message.from_user.full_name
    user_id = message.from_user.id
    await bot.send_chat_action(user_id, 'typing')
    await asyncio.sleep(0.5)

    lang_keyboard = types.InlineKeyboardMarkup()
    lang_keyboard.add(types.InlineKeyboardButton(text="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞üá∫üá¶", callback_data="lang_ua"),
                      types.InlineKeyboardButton(text="Englishüá¨üáß", callback_data="lang_en"))

    if check_user_exists(user_id):
        await start_taryf(message)
    else:
        await message.reply(f"""–ü—Ä–∏–≤—ñ—Ç *{name}*, –±—É–¥—å–ª–∞—Å–∫–∞ –æ–±–µ—Ä–∏ –º–æ–≤—É!  
Hi *{name}*, please choose your language!""",
                            reply_markup=lang_keyboard, parse_mode="Markdown")


@dp.message_handler(commands=['language'])
async def change_lang(message: types.Message):
    user_id = message.from_user.id
    await bot.send_chat_action(user_id, 'typing')
    await asyncio.sleep(0.5)
    lang_keyboard = types.InlineKeyboardMarkup()
    lang_keyboard.add(types.InlineKeyboardButton(text="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞üá∫üá¶", callback_data="lang_ua"),
                      types.InlineKeyboardButton(text="Englishüá¨üáß", callback_data="lang_en"))

    await message.reply(f"""–ë—É–¥—å –ª–∞—Å–∫–∞ –æ–±–µ—Ä–∏ –º–æ–≤—É!  
Please choose your language!""",
                        reply_markup=lang_keyboard, parse_mode="Markdown")


async def start_taryf(message: types.Message):
    user_id = message.from_user.id
    name = message.from_user.full_name
    user_language = get_user_language(user_id)

    if user_language == "ua":
        start_keyboard_ua = types.InlineKeyboardMarkup()
        start_keyboard_ua.add(types.InlineKeyboardButton(text="üîé–ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–∞—Ä–∏—Ñ", callback_data="age_survey"),
                              types.InlineKeyboardButton(text="üåê–í—Å—ñ —Ç–∞—Ä–∏—Ñ–∏",
                                                         url="https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/"))
        await bot.send_message(user_id, f"–ü—Ä–∏–≤—ñ—Ç *{name}*! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π –¥–ª—è —Ç–µ–±–µ —Ç–∞—Ä–∏—Ñ Lifecell!",
                               reply_markup=start_keyboard_ua, parse_mode="Markdown")

    elif user_language == "en":
        start_keyboard_en = types.InlineKeyboardMarkup()
        start_keyboard_en.add(types.InlineKeyboardButton(text="üîéStart selection", callback_data="age_survey"),
                              types.InlineKeyboardButton(text="üåêAll tariffs",
                                                         url="https://www.lifecell.ua/en/mobile/tariffs/"))
        await bot.send_message(user_id, f"Hello *{name}*! I will help you to find the best Lifecell tariff!",
                               reply_markup=start_keyboard_en, parse_mode="Markdown")


@dp.callback_query_handler(lambda call: call.data == 'age_survey')
async def age_select(call: types.CallbackQuery):
    name = call.from_user.full_name
    user_id = call.from_user.id
    user_language = get_user_language(user_id)

    if user_language == "ua":
        understood_keyboard_ua = types.InlineKeyboardMarkup()
        understood_keyboard_ua.add(types.InlineKeyboardButton(text="‚úÖ–ó—Ä–æ–∑—É–º—ñ–ª–æ", callback_data="understood"))

        await call.message.edit_text(
            text=f"*{name}*, —â–æ–± –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ç–∞—Ä–∏—Ñ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Ç–∞–Ω—å.",
            reply_markup=understood_keyboard_ua, parse_mode="Markdown")

    elif user_language == "en":
        understood_keyboard_en = types.InlineKeyboardMarkup()
        understood_keyboard_en.add(types.InlineKeyboardButton(text="‚úÖUnderstood", callback_data="understood"))

        await call.message.edit_text(
            text=f"*{name}*, to choose the best tariff, you need to answer a few simple questions.",
            reply_markup=understood_keyboard_en, parse_mode="Markdown")


@dp.callback_query_handler(lambda call: call.data == 'understood')
async def undersood_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_language = get_user_language(user_id)

    if user_language == "ua":
        less_than_eighteen = types.InlineKeyboardButton(text="–ú–µ–Ω—à–µ 18", callback_data="less_than_eighteen")
        more_than_eighteen = types.InlineKeyboardButton(text="–ë—ñ–ª—å—à–µ 18", callback_data="more_than_eighteen")
        back_button = types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="age_survey")

        age_keyboard = types.InlineKeyboardMarkup()
        age_keyboard.row(less_than_eighteen, more_than_eighteen)
        age_keyboard.row(back_button)

        await call.message.edit_text(text="""*–ü–µ—Ä—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è*:
–ë—É–¥—å–ª–∞—Å–∫–∞ –æ–±–µ—Ä—ñ—Ç—å –≤–∞—à –≤—ñ–∫.""", reply_markup=age_keyboard, parse_mode="Markdown")
    elif user_language == "en":
        less_than_eighteen = types.InlineKeyboardButton(text="Less than 18", callback_data="less_than_eighteen")
        more_than_eighteen = types.InlineKeyboardButton(text="More than 18", callback_data="more_than_eighteen")
        back_button = types.InlineKeyboardButton(text="‚¨Ö Back", callback_data="age_survey")

        age_keyboard = types.InlineKeyboardMarkup()
        age_keyboard.row(less_than_eighteen, more_than_eighteen)
        age_keyboard.row(back_button)

        await call.message.edit_text(text="""*First question*:
Please select your age.""", reply_markup=age_keyboard, parse_mode="Markdown")


@dp.callback_query_handler(lambda call: call.data == 'less_than_eighteen')
async def less_than_eighteen(call: types.CallbackQuery):
    name = call.from_user.full_name
    user_id = call.from_user.id
    user_language = get_user_language(user_id)

    if user_language == "ua":
        school_life = types.InlineKeyboardButton(text="üì≤–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏",
                                                 url="https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/shkilniy/")
        not_interest = types.InlineKeyboardButton(text="‚ùå–ù–µ —Ü—ñ–∫–∞–≤–æ", callback_data="more_than_eighteen")
        back_button = types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="understood")

        school_life_keyboard = types.InlineKeyboardMarkup()
        school_life_keyboard.row(school_life)
        school_life_keyboard.row(not_interest)
        school_life_keyboard.row(back_button)

        await call.message.edit_text(
            text=f"*{name}*, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∞–º –º–µ–Ω—à–µ 18-—Ç–∏. –¢–æ–º—É –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –≤–∞–º —Ç–∞—Ä–∏—Ñ '*–®–∫—ñ–ª—å–Ω–∏–π –õ–∞–π—Ñ*', —è–∫–∏–π –∑—Ä–æ–±–ª–µ–Ω–∏–π —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è —à–∫–æ–ª—è—Ä—ñ–≤.",
            parse_mode="Markdown", reply_markup=school_life_keyboard)

    if user_language == "en":
        school_life = types.InlineKeyboardButton(text="üì≤Connect",
                                                 url="https://www.lifecell.ua/uk/mobilnij-zvyazok/taryfy/shkilniy/")
        not_interest = types.InlineKeyboardButton(text="‚ùåNot interested", callback_data="more_than_eighteen")
        back_button = types.InlineKeyboardButton(text="‚¨Ö Back", callback_data="understood")

        school_life_keyboard = types.InlineKeyboardMarkup()
        school_life_keyboard.row(school_life)
        school_life_keyboard.row(not_interest)
        school_life_keyboard.row(back_button)

        await call.message.edit_text(
            text=f"*{name}*, because you are under 18. That's why we offer you the '*School Life*' tariff, which is specially designed for schoolchildren.",
            parse_mode="Markdown", reply_markup=school_life_keyboard)


# noinspection PyUnboundLocalVariable
@dp.callback_query_handler(lambda call: call.data == 'more_than_eighteen')
async def more_than_eighteen(call: types.CallbackQuery):
    name = call.from_user.full_name
    user_id = call.from_user.id
    user_language = get_user_language(user_id)

    if user_language == "ua":
        own_button = types.InlineKeyboardButton(text="üôã‚Äç‚ôÇÔ∏è–î–ª—è —Å–µ–±–µ", callback_data="for_me")
        family_button = types.InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶–î–ª—è —Å—ñ–º'—ó", callback_data="for_family")
        for_gadget_button = types.InlineKeyboardButton(text="üíª–î–ª—è “ê–∞–¥–∂–µ—Ç–∞", callback_data="for_gadget")
        what_difference_button = types.InlineKeyboardButton(text="–í —á–æ–º—É —Ä—ñ–∑–Ω–∏—Ü—è‚ùì", callback_data="what_difference")
        back_button = types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="understood")

        usage_select_ua = types.InlineKeyboardMarkup()
        usage_select_ua.row(own_button)
        usage_select_ua.row(family_button, for_gadget_button)
        usage_select_ua.row(what_difference_button)
        usage_select_ua.row(back_button)

        await call.message.edit_text(
            text=f"*{name}*, –¥–ª—è —è–∫–æ–≥–æ —Ç–∏–ø—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç–∞—Ä–∏—Ñ?", parse_mode="Markdown",
            reply_markup=usage_select_ua)

    elif user_language == "en":
        own_button = types.InlineKeyboardButton(text="üôã‚Äç‚ôÇÔ∏èFor yourself", callback_data="for_me")
        family_button = types.InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶For family", callback_data="for_family")
        for_gadget_button = types.InlineKeyboardButton(text="üíªFor Gadget", callback_data="for_gadget")
        what_difference_button = types.InlineKeyboardButton(text="What's the difference‚ùì",
                                                            callback_data="what_difference")
        back_button = types.InlineKeyboardButton(text="‚¨Ö Back", callback_data="understood")

        usage_select_en = types.InlineKeyboardMarkup()
        usage_select_en.row(own_button)
        usage_select_en.row(family_button, for_gadget_button)
        usage_select_en.row(what_difference_button)
        usage_select_en.row(back_button)

        await call.message.edit_text(
            text=f"*{name}*, for what type of use you need the tariff?", parse_mode="Markdown",
            reply_markup=usage_select_en)


@dp.callback_query_handler(lambda call: call.data == 'what_difference')
async def what_difference_handler(call: types.CallbackQuery):
    user_id = call.from_user.id
    user_language = get_user_language(user_id)

    if user_language == "ua":
        back_keyboard_ua = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="more_than_eighteen")
        back_keyboard_ua.row(back_button)

        await call.message.edit_text(
            text=f"""
*–°–º–∞—Ä—Ç –°—ñ–º'—è* - —Ç–∞—Ä–∏—Ñ –ø—Ä–æ–ø–æ–Ω—É—î —ñ–¥–µ–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è —Å—ñ–º–µ–π, —è–∫—ñ –±–∞–∂–∞—é—Ç—å –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∑–≤'—è–∑–∫—É –≤—Å—ñ–º —Å–≤–æ—ó–º —á–ª–µ–Ω–∞–º. –í—ñ–Ω –Ω–∞–¥–∞—î —Å–ø—ñ–ª—å–Ω–∏–π –ø–∞–∫–µ—Ç —Ä–µ—Å—É—Ä—Å—ñ–≤, —Ç–∞–∫–∏—Ö —è–∫ —Ö–≤–∏–ª–∏–Ω–∏ —Ä–æ–∑–º–æ–≤, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ –æ–±—Å—è–≥ –¥–∞–Ω–∏—Ö, —è–∫—ñ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è –≤—Å—ñ—Ö –Ω–æ–º–µ—Ä—ñ–≤ —É —Å—ñ–º'—ó. –¶–µ –¥–æ–∑–≤–æ–ª—è—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∫–µ—Ä—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∞–º–∏ —Ä–µ—Å—É—Ä—Å—ñ–≤ —ñ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –∫–æ—à—Ç–∏, –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –æ–∫—Ä–µ–º–∏–º–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —á–ª–µ–Ω–∞ —Å—ñ–º'—ó.

*“ê–∞–¥–∂–µ—Ç* - –±—É–¥–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∏–º –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º –¥–ª—è –ª—é–¥–µ–π, —è–∫—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –±–∞–≥–∞—Ç–æ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ —ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –¶–µ–π —Ç–∞—Ä–∏—Ñ –∑–∞–∑–≤–∏—á–∞–π –Ω–∞–¥–∞—î –≤–µ–ª–∏–∫–∏–π –æ–±—Å—è–≥ –¥–∞–Ω–∏—Ö –∑ –≤–∏—Å–æ–∫–æ—é —à–≤–∏–¥–∫—ñ—Å—Ç—é –ø–µ—Ä–µ–¥–∞—á—ñ, —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –¥–ª—è –ø–æ—Ç—Ä–µ–± –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è.""",
            reply_markup=back_keyboard_ua, parse_mode="Markdown")

    elif user_language == "en":
        back_keyboard_en = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton(text="‚¨Ö Back", callback_data="more_than_eighteen")
        back_keyboard_en.row(back_button)
        await call.message.edit_text(
            text=f"""
*Smart Family* - the tariff offers an ideal option for families who want to provide access to communication to all their members. It provides a shared package of resources, such as talk minutes, messages and data, which can be used for all numbers in the family. This allows you to effectively manage resource consumption and save money compared to separate individual tariffs for each family member.

*Gadget* - is a great option for people who use many different devices and need constant access to the Internet. This tariff usually provides a large amount of data at high speeds, specially configured for the needs of a continuous connection.""",
            reply_markup=back_keyboard_en, parse_mode="Markdown")


@dp.callback_query_handler(lambda call: call.data == 'for_family')
async def for_family_handler(call: types.CallbackQuery):
    name = call.from_user.full_name
    user_id = call.from_user.id
    user_language = get_user_language(user_id)

    if user_language == "ua":
        back_keyboard_ua = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="more_than_eighteen")
        back_keyboard_ua.row(back_button)

        await call.message.edit_text(
            text=f"*{name}*, —Ç–∞—Ä–∏—Ñ—ñ–≤ —Å—ñ–º'—ó —â–µ –Ω–µ–º–∞",
            reply_markup=back_keyboard_ua, parse_mode="Markdown")

    elif user_language == "en":
        back_keyboard_en = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton(text="‚¨Ö Back", callback_data="more_than_eighteen")
        back_keyboard_en.row(back_button)
        await call.message.edit_text(
            text=f"*{name}*, there are no family tariffs yet",
            reply_markup=back_keyboard_en, parse_mode="Markdown")


@dp.callback_query_handler(lambda call: call.data == 'for_gadget')
async def for_family_handler(call: types.CallbackQuery):
    name = call.from_user.full_name
    user_id = call.from_user.id
    user_language = get_user_language(user_id)

    if user_language == "ua":
        back_keyboard_ua = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="more_than_eighteen")
        back_keyboard_ua.row(back_button)

        await call.message.edit_text(
            text=f"*{name}*, —Ç–∞—Ä–∏—Ñ—ñ–≤ –≥–∞–¥–∂–µ—Ç—ñ–≤ —â–µ –Ω–µ–º–∞ —â–µ –Ω–µ–º–∞",
            reply_markup=back_keyboard_ua, parse_mode="Markdown")

    elif user_language == "en":
        back_keyboard_en = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton(text="‚¨Ö Back", callback_data="more_than_eighteen")
        back_keyboard_en.row(back_button)
        await call.message.edit_text(
            text=f"*{name}*, there are no gadget tariffs  yet",
            reply_markup=back_keyboard_en, parse_mode="Markdown")


@dp.callback_query_handler(lambda call: call.data == 'for_me')
async def how_much_speak(call: types.CallbackQuery):
    name = call.from_user.full_name
    user_id = call.from_user.id
    user_language = get_user_language(user_id)

    if user_language == "ua":
        almost_never_button = types.InlineKeyboardButton(text="üôÖ‚Äç‚ôÇÔ∏è–ú–∞–π–∂–µ –Ω—ñ–∫–æ–ª–∏(–¥–æ 500—Ö–≤)", callback_data="call_almostnever")
        sometimes_button = types.InlineKeyboardButton(text="üí¨–ì–æ–≤–æ—Ä—é –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ(600 - 1000—Ö–≤)", callback_data="call_sometimes")
        like_long_calls_button = types.InlineKeyboardButton(text="üó£Ô∏è–ß–∞—Å—Ç–æ –∑–∞–≥–æ–≤–æ—Ä—é—é—Å—è(1000-2000—Ö–≤)",
                                                            callback_data="call_longcalls")
        everytime_on_phone_button = types.InlineKeyboardButton(text="üìû–ó–∞–≤–∂–¥–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ(–Ω–æ–Ω–∞–¥ 2000—Ö–≤)",
                                                               callback_data="call_everytimeonphone")
        back_button = types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="more_than_eighteen")

        calls_keyboard_ua = types.InlineKeyboardMarkup()
        calls_keyboard_ua.row(almost_never_button)
        calls_keyboard_ua.row(sometimes_button)
        calls_keyboard_ua.row(like_long_calls_button)
        calls_keyboard_ua.row(everytime_on_phone_button)
        calls_keyboard_ua.row(back_button)

        await call.message.edit_text(text=f"*{name}*, –±—É–¥—å–ª–∞—Å–∫–∞ –æ–±–µ—Ä–∏ —è–∫ —á–∞—Å—Ç–æ —Ç–∏ —Å–ø—ñ–ª–∫—É—î—à—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
                                     parse_mode="Markdown", reply_markup=calls_keyboard_ua)

    elif user_language == "en":
        almost_never_button = types.InlineKeyboardButton(text="üôÖ‚Äç‚ôÇÔ∏è‚ÄçAlmost never (up to 500 min)", callback_data="call_almost_never")
        sometimes_button = types.InlineKeyboardButton(text="üí¨I talk when needed (600 - 1000 min)", callback_data="call_sometimes")
        like_long_calls_button = types.InlineKeyboardButton(text="üó£Ô∏èI talk a lot (1000-2000 min)",  callback_data="call_long_calls")
        everytime_on_phone_button = types.InlineKeyboardButton(text="üìûAlways on the phone (over 2000 min)", callback_data="call_everytime_on_phone")
        back_button = types.InlineKeyboardButton(text="‚¨Ö Back", callback_data="more_than_eighteen")

        calls_keyboard_en = types.InlineKeyboardMarkup()
        calls_keyboard_en.row(almost_never_button)
        calls_keyboard_en.row(sometimes_button)
        calls_keyboard_en.row(like_long_calls_button)
        calls_keyboard_en.row(everytime_on_phone_button)
        calls_keyboard_en.row(back_button)

        await call.message.edit_text(text=f"*{name}*, please select how often you talk by phone.",
                                     parse_mode="Markdown", reply_markup=calls_keyboard_en)


@dp.callback_query_handler(lambda call: call.data.startswith('call_'))
async def internet(call: types.CallbackQuery):
    phone_call = str(call.data.split('_')[1])
    name = call.from_user.full_name
    user_id = call.from_user.id
    save_calls_choice(user_id, phone_call)
    user_language = get_user_language(user_id)

    if user_language == "ua":
        mildly_internet_button = types.InlineKeyboardButton(text="üíªüì≤–í–∏—Ç—Ä–∞—á–∞—é –ø–æ–º—ñ—Ä–Ω–æ5-10–≥–±",
                                                            callback_data="mobdata_mildlyinternet")
        more_internet_button = types.InlineKeyboardButton(text="üì∂üíæ–í–∏—Ç—Ä–∞—á–∞—é –¥–æ–≤–æ–ª—ñ –±–∞–≥–∞—Ç–æ 10–≥–±+",
                                                          callback_data="mobdata_muchinternet")
        everytime_online_button = types.InlineKeyboardButton(text="üåêüî•–ó–∞–≤–∂–¥–∏ –æ–Ω–ª–∞–π–Ω 25–≥–±+",
                                                             callback_data="mobdata_everytimeonline")
        back_button = types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="for_me")

        internet_keyboard_ua = types.InlineKeyboardMarkup()
        internet_keyboard_ua.row(mildly_internet_button)
        internet_keyboard_ua.row(more_internet_button)
        internet_keyboard_ua.row(everytime_online_button)
        internet_keyboard_ua.row(back_button)

        await call.message.edit_text(text=f"*{name}*, —Å–∫—ñ–ª—å–∫–∏ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç—Ä–∞—Ñ—ñ–∫—É –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ?",
                                     parse_mode="Markdown", reply_markup=internet_keyboard_ua)
    elif user_language == "en":
        mildly_internet_button = types.InlineKeyboardButton(text="üíªüì≤I spend moderately 5-10gb",
                                                            callback_data="mobdata_mildly_internet")
        more_internet_button = types.InlineKeyboardButton(text="üì∂üíæI spend a lot 10gb+",
                                                          callback_data="mobdata_more_internet")
        everytime_online_button = types.InlineKeyboardButton(text="üåêüî•Always online 25gb+",
                                                             callback_data="mobdata_everytime_online")
        back_button = types.InlineKeyboardButton(text="‚¨Ö Back", callback_data="for_me")

        internet_keyboard_ua = types.InlineKeyboardMarkup()
        internet_keyboard_ua.row(mildly_internet_button)
        internet_keyboard_ua.row(more_internet_button)
        internet_keyboard_ua.row(everytime_online_button)
        internet_keyboard_ua.row(back_button)

        await call.message.edit_text(text=f"*{name}*, how much internet traffic do you use?",
                                     parse_mode="Markdown", reply_markup=internet_keyboard_ua)


@dp.callback_query_handler(lambda call: call.data.startswith('mobdata_'))
async def social_handler(call: types.CallbackQuery):
    mob_data = str(call.data.split('_')[1])
    name = call.from_user.full_name
    user_id = call.from_user.id
    save_mobdata_choice(user_id, mob_data)
    user_language = get_user_language(user_id)

    if user_language == "ua":

        yes_social_button = types.InlineKeyboardButton(text="–¢–∞–∫üì±", callback_data="social_yes")
        no_social_button = types.InlineKeyboardButton(text="–ù—ñüìµ",
                                                      callback_data="social_no")
        back_button = types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="call_")

        social_keyboard_ua = types.InlineKeyboardMarkup()
        social_keyboard_ua.row(yes_social_button, no_social_button)
        social_keyboard_ua.row(back_button)

        await call.message.edit_text(text=f"*{name}*, –≤–∏ –≤–≤–∞–∂–∞—î—Ç–µ —Å–µ–±–µ –∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂?",
                                     parse_mode="Markdown", reply_markup=social_keyboard_ua)
    elif user_language == "en":

        yes_social_button = types.InlineKeyboardButton(text="Yesüì±", callback_data="social_yes")
        no_social_button = types.InlineKeyboardButton(text="Noüìµ",
                                                      callback_data="social_no")
        back_button = types.InlineKeyboardButton(text="‚¨Ö Back", callback_data="call_")

        social_keyboard_ua = types.InlineKeyboardMarkup()
        social_keyboard_ua.row(yes_social_button, no_social_button)
        social_keyboard_ua.row(back_button)

        await call.message.edit_text(text=f"*{name}*, do you consider yourself an active user of social media?",
                                     parse_mode="Markdown", reply_markup=social_keyboard_ua)


@dp.callback_query_handler(lambda call: call.data.startswith('social_'))
async def finish(call: types.CallbackQuery):
    social = str(call.data.split('_')[1])
    name = call.from_user.full_name
    user_id = call.from_user.id
    save_social_choice(user_id, social)
    user_language = get_user_language(user_id)

    if user_language == "ua":

        show_result_ua_button = types.InlineKeyboardButton(text="–î—ñ–∑–Ω–∞—Ç–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç‚úÖ", callback_data="result")
        back_button = types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="mobdata_")

        result_keyboard_ua = types.InlineKeyboardMarkup()
        result_keyboard_ua.row(show_result_ua_button)
        result_keyboard_ua.row(back_button)

        await call.message.edit_text(
            text=f"*{name}*, –≤–∏ –¥–∞–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤—Å—ñ –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç!",
            parse_mode="Markdown", reply_markup=result_keyboard_ua)

    elif user_language == "en":

        show_result_ua_button = types.InlineKeyboardButton(text="Result‚úÖ", callback_data="result")
        back_button = types.InlineKeyboardButton(text="‚¨Ö Back", callback_data="mobdata_")

        result_keyboard_ua = types.InlineKeyboardMarkup()
        result_keyboard_ua.row(show_result_ua_button)
        result_keyboard_ua.row(back_button)

        await call.message.edit_text(
            text=f"*{name}*, you have answered all questions, click on the button to find out the result!",
            parse_mode="Markdown", reply_markup=result_keyboard_ua)


@dp.callback_query_handler(lambda call: call.data.startswith('result'))
async def result(call: types.CallbackQuery):
    name = call.from_user.full_name
    user_id = call.from_user.id
    user_language = get_user_language(user_id)

    if user_language == "ua":

        await call.message.edit_text(text=f"*{name}*, –≤–∞—à —Ç–∞—Ä–∏—Ñ - —â–µ –Ω–µ–º–∞—î –ø–∞—Ä—Å–µ—Ä—É —ñ –≤–∏–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ—ñ–≤)",
                                     parse_mode="Markdown")
    elif user_language == "en":
        await call.message.edit_text(text=f"*{name}*, your tariff - there is no parser and tariff selection yet)",
                                     parse_mode="Markdown")


@dp.callback_query_handler()
async def language_callback(call: types.CallbackQuery):
    user_id = call.from_user.id
    language = call.data.split('_')[1]
    await bot.send_chat_action(user_id, 'typing')
    await asyncio.sleep(0.5)

    if language == "ua":
        await call.message.edit_text(text="""–í–∏ –æ–±—Ä–∞–ª–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—Éüá∫üá¶!
–í–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É –Ω–∞–ø–∏—Å–∞–≤—à–∏ /language
–¢–µ–ø–µ—Ä —â–µ —Ä–∞–∑ –Ω–∞–ø–∏—à—ñ—Ç—å /start!
""")
        save_language_choice(user_id, language)
        await start_taryf(call.message)


    elif language == "en":
        await call.message.edit_text(text="""You have successfully selected Englishüá¨üáß!
You can always change the language by writing /language
Now type /start again!
""")
        save_language_choice(user_id, language)


if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
